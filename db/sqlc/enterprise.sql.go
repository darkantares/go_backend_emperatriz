// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: enterprise.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEnterprise = `-- name: CreateEnterprise :one
INSERT INTO "enterprise" (
  "title", 
  "document_verification", 
  "phone", 
  "email", 
  "contact", 
  "contact_phone", 
  "files", 
  "address", 
  "web", 
  "is_authenticated", 
  "info_table_id"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, title, document_verification, phone, email, contact, contact_phone, files, address, web, "is_authenticated", info_table_id
`

type CreateEnterpriseParams struct {
	Title                string      `json:"title"`
	DocumentVerification string      `json:"document_verification"`
	Phone                string      `json:"phone"`
	Email                string      `json:"email"`
	Contact              pgtype.Text `json:"contact"`
	ContactPhone         string      `json:"contact_phone"`
	Files                string      `json:"files"`
	Address              string      `json:"address"`
	Web                  string      `json:"web"`
	IsAuthenticated      bool        `json:"is_authenticated"`
	InfoTableID          pgtype.Int4 `json:"info_table_id"`
}

func (q *Queries) CreateEnterprise(ctx context.Context, arg CreateEnterpriseParams) (Enterprise, error) {
	row := q.db.QueryRow(ctx, createEnterprise,
		arg.Title,
		arg.DocumentVerification,
		arg.Phone,
		arg.Email,
		arg.Contact,
		arg.ContactPhone,
		arg.Files,
		arg.Address,
		arg.Web,
		arg.IsAuthenticated,
		arg.InfoTableID,
	)
	var i Enterprise
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DocumentVerification,
		&i.Phone,
		&i.Email,
		&i.Contact,
		&i.ContactPhone,
		&i.Files,
		&i.Address,
		&i.Web,
		&i.IsAuthenticated,
		&i.InfoTableID,
	)
	return i, err
}

const getEnterprise = `-- name: GetEnterprise :one
SELECT id, title, document_verification, phone, email, contact, contact_phone, files, address, web, "is_authenticated", info_table_id 
FROM "enterprise"
WHERE "id" = $1
`

func (q *Queries) GetEnterprise(ctx context.Context, id int32) (Enterprise, error) {
	row := q.db.QueryRow(ctx, getEnterprise, id)
	var i Enterprise
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DocumentVerification,
		&i.Phone,
		&i.Email,
		&i.Contact,
		&i.ContactPhone,
		&i.Files,
		&i.Address,
		&i.Web,
		&i.IsAuthenticated,
		&i.InfoTableID,
	)
	return i, err
}

const listEnterprises = `-- name: ListEnterprises :many
SELECT id, title, document_verification, phone, email, contact, contact_phone, files, address, web, "is_authenticated", info_table_id FROM "enterprise"
`

func (q *Queries) ListEnterprises(ctx context.Context) ([]Enterprise, error) {
	rows, err := q.db.Query(ctx, listEnterprises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Enterprise{}
	for rows.Next() {
		var i Enterprise
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DocumentVerification,
			&i.Phone,
			&i.Email,
			&i.Contact,
			&i.ContactPhone,
			&i.Files,
			&i.Address,
			&i.Web,
			&i.IsAuthenticated,
			&i.InfoTableID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnterprise = `-- name: UpdateEnterprise :one
UPDATE "enterprise"
SET 
  "title" = $1,
  "document_verification" = $2,
  "phone" = $3,
  "email" = $4,
  "contact" = $5,
  "contact_phone" = $6,
  "files" = $7,
  "address" = $8,
  "web" = $9,
  "is_authenticated" = $10,
  "info_table_id" = $11
WHERE 
  "id" = $12
RETURNING id, title, document_verification, phone, email, contact, contact_phone, files, address, web, "is_authenticated", info_table_id
`

type UpdateEnterpriseParams struct {
	Title                string      `json:"title"`
	DocumentVerification string      `json:"document_verification"`
	Phone                string      `json:"phone"`
	Email                string      `json:"email"`
	Contact              pgtype.Text `json:"contact"`
	ContactPhone         string      `json:"contact_phone"`
	Files                string      `json:"files"`
	Address              string      `json:"address"`
	Web                  string      `json:"web"`
	IsAuthenticated      bool        `json:"is_authenticated"`
	InfoTableID          pgtype.Int4 `json:"info_table_id"`
	ID                   int32       `json:"id"`
}

func (q *Queries) UpdateEnterprise(ctx context.Context, arg UpdateEnterpriseParams) (Enterprise, error) {
	row := q.db.QueryRow(ctx, updateEnterprise,
		arg.Title,
		arg.DocumentVerification,
		arg.Phone,
		arg.Email,
		arg.Contact,
		arg.ContactPhone,
		arg.Files,
		arg.Address,
		arg.Web,
		arg.IsAuthenticated,
		arg.InfoTableID,
		arg.ID,
	)
	var i Enterprise
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DocumentVerification,
		&i.Phone,
		&i.Email,
		&i.Contact,
		&i.ContactPhone,
		&i.Files,
		&i.Address,
		&i.Web,
		&i.IsAuthenticated,
		&i.InfoTableID,
	)
	return i, err
}
